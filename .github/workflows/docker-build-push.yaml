---
name: "docker-build-push"

# yamllint disable-line rule:truthy
on:
  workflow_dispatch: {}  # Enables manual triggering
  push:
    branches:
      - "main"
      - "develop"
      - "feature/*"
    tags:
      - "v*.*.*"  # Semantic versioning tags
  pull_request:
    branches:
      - "main"
      - "develop"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build-push-job:
    runs-on: "ubuntu-24.04"
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: "Checkout repository"
        uses: "actions/checkout@v4.2.2"

      - name: "Set up Docker Buildx"
        uses: "docker/setup-buildx-action@v3"
        with:
          platforms: linux/amd64,linux/arm64

      - name: "Set up QEMU for multi-platform builds"
        uses: "docker/setup-qemu-action@v3"
        with:
          platforms: arm64

      - name: "Log in to Container Registry"
        if: github.event_name != 'pull_request'
        uses: "docker/login-action@v3"
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: "Extract metadata"
        id: meta
        uses: "docker/metadata-action@v5"
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Branch event
            type=ref,event=branch
            # Tag event
            type=ref,event=tag
            # PR event
            type=ref,event=pr
            # Set latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Set edge tag for develop branch
            type=raw,value=edge,enable=${{ github.ref == 'refs/heads/develop' }}
            # Semantic versioning
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # SHA for all events
            type=sha,prefix={{branch}}-
          labels: |
            org.opencontainers.image.title=cosmo-trigger
            org.opencontainers.image.description=Cosmos chain monitoring and CI/CD trigger service
            org.opencontainers.image.vendor=Telekom MMS GmbH
            org.opencontainers.image.authors=VaaS Team <staking@telekom-mms.com>
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}

      - name: "Build and push Docker image"
        id: build
        uses: "docker/build-push-action@v6"
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            APP_USER_NAME=cosmo-trigger
            APP_USER_UID=1001
            APP_GROUP_NAME=cosmo-trigger
            APP_GROUP_GID=1001

      - name: "Generate artifact attestation"
        if: github.event_name != 'pull_request'
        uses: "actions/attest-build-provenance@v2"
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: "Run Docker Scout vulnerability scan"
        if: github.event_name != 'pull_request'
        uses: "docker/scout-action@v1"
        with:
          command: cves,recommendations,compare
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          to-latest: true
          ignore-unchanged: true
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Output image details"
        run: |
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"
          echo "Metadata: ${{ steps.meta.outputs.json }}" 